pragma solidity >=0.4.25 <=0.8.1;


contract MetaCoin 
{
	mapping (address => uint256) balances;

	event Transfer(address indexed _from, address indexed _to, uint256 _value);

	constructor() public 
	{
		balances[tx.origin] = 100000;
	}

	function sendCoin(address receiver, uint256 amount, address sender) public returns(bool sufficient) 
	{
		if (balances[sender] < amount) return false;
		balances[sender] -= amount;
		balances[receiver] += amount;
		emit Transfer(sender, receiver, amount);
		return true;
	}


	function getBalance(address addr) public view returns(uint256) 
	{
		return balances[addr];
	}
}


contract Loan is MetaCoin 
{

    mapping (address => uint256) private loans;
     
    event Request(address indexed _from, uint256 P, uint R, uint T, uint256 amt);
    
    address private Owner;

    
    modifier isOwner() 
    {
         require(
         msg.sender == Owner,
         "Sender not owner"
      );
      _;
    }
    
    constructor() public 
    {
        Owner = msg.sender;
    }
    
    function getCompoundInterest(uint256 principle, uint rate, uint time) public pure returns(uint256) 
    {
        uint256 temp = 100 + rate*time;
        temp = (temp*principle)/100;
        return temp;
    }
    
    function reqLoan(uint256 principle, uint rate, uint time) public returns(bool correct) 
    {
        uint256 toPay = getCompoundInterest(principle, rate, time);
        if(toPay>principle)
         return false;
        else if (rate%1!=0)
         return false;
        emit Request(msg.sender,principle, rate,time, toPay);
        loans[msg.sender] = toPay;
        return true;
    }
    
    function getOwnerBalance() public view returns(uint256) 
    {
        uint l =0;
        l = MetaCoin.getBalance(Owner);
        return l;
	}
    
    
    function viewDues(address pl) public view isOwner returns(uint256 o)
    {
        uint256 d = 0;
        d = loans[pl];
        return d;
    }
    
    function settleDues(address pl) public isOwner returns(bool g)
    {
        uint256 d = 0;
        d = loans[pl];
        bool k;
        k = MetaCoin.sendCoin(pl,d,msg.sender);
        if(k==true)
         {
             delete(loans[pl]);
         }
         return k;
    }
    
}
